---
name: profile-generator-github-workflow-template-test

on:
  push:
  schedule:
    - cron: "0 6 * * 1"
  workflow_dispatch:

#  secrets:
#    REMOTE_TOKEN:
#      description: "GitHub token with access to the test repository."
#      required: true
#    REMOTE_ORIGIN:
#      description: "Identifies the test repository as: owner/repository"
#      required: true
#    SLACK_WEBHOOK:
#      description: "Optional, enables Slack notifications."
#      required: false

jobs:

  configuration:
    uses: cicd-tools-org/cicd-tools/.github/workflows/job-00-cookiecutter-read_configuration.yml@main

  start:
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    uses: cicd-tools-org/cicd-tools/.github/workflows/job-00-generic-notification.yml@main
    with:
      NOTIFICATION_EMOJI: ":vertical_traffic_light:"
      NOTIFICATION_MESSAGE: "workflow has started!"

  security:
    needs: [configuration]
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    uses: cicd-tools-org/cicd-tools/.github/workflows/job-10-generic-security_scan_credentials.yml@main
    with:
      VERBOSE_NOTIFICATIONS: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_VERBOSE_NOTIFICATIONS }}

  markdown_links:
    needs: [configuration]
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    uses: cicd-tools-org/cicd-tools/.github/workflows/job-30-cookiecutter-markdown_links.yml@main
    with:
      CONCURRENCY: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_CONCURRENCY }}
      CONFIG_FILE: "{{cookiecutter.project_slug}}/.github/config/actions/gaurav-nelson-github-action-markdown-link-check.json"
      PYTHON_VERSIONS: ${{ toJSON(fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_PYTHON_VERSIONS) }}
      VERBOSE_NOTIFICATIONS: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_VERBOSE_NOTIFICATIONS }}

  pre-commit_hooks:
    needs: [configuration]
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    uses: cicd-tools-org/cicd-tools/.github/workflows/job-50-cookiecutter-test_precommit_hooks.yml@main
    with:
      CONCURRENCY: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_CONCURRENCY }}
      ENABLED_PRECOMMIT_CHECKS: '["test_ansible_lint_fails", "test_commit_lint_fails", "test_commit_spelling_fails", "test_credentials_fails", "test_shell_lint_fails", "test_shell_format_fails", "test_toml_lint_fails", "test_toml_lint_passes", "test_workflow_lint_fails", "test_workflow_header_lint_fails"]'
      PYTHON_VERSIONS: ${{ toJSON(fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_PYTHON_VERSIONS) }}
      TEMPLATE_SCENARIOS: ${{ needs.configuration.outputs.COOKIECUTTER_ALL_SCENARIOS }}
      VERBOSE_NOTIFICATIONS: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_VERBOSE_NOTIFICATIONS }}

  ansible_lint:
    needs: [configuration]
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    uses: cicd-tools-org/cicd-tools/.github/workflows/job-40-cookiecutter-ansible_lint.yml@main
    with:
      CONCURRENCY: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_CONCURRENCY }}
      GALAXY_REQUIREMENTS_PATH: "profile/requirements.yml"
      PYTHON_VERSIONS: ${{ toJSON(fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_PYTHON_VERSIONS) }}
      TARGET_PATH: "profile"
      VERBOSE_NOTIFICATIONS: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_VERBOSE_NOTIFICATIONS }}

  commit_lint:
    needs: [configuration]
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    uses: cicd-tools-org/cicd-tools/.github/workflows/job-80-poetry-rev_range_command.yml@main
    with:
      COMMAND: |
        poetry run cz check --rev-range "${PUSHED_COMMIT_REV_RANGE}"
      COMMAND_NAME: "Commit Message Lint"
      CONCURRENCY: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_CONCURRENCY }}
      PYTHON_VERSIONS: ${{ toJSON(fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_PYTHON_VERSIONS) }}
      REV_RANGE: "HEAD"
      VERBOSE_NOTIFICATIONS: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_VERBOSE_NOTIFICATIONS }}

  commit_spell_check:
    needs: [configuration]
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    uses: cicd-tools-org/cicd-tools/.github/workflows/job-80-poetry-rev_range_command.yml@main
    with:
      COMMAND: |
        CICD_COMMIT_MESSAGES_FILE="$(mktemp XXXXXXXX.git_history_file)"
        git log --pretty=format:%s "${PUSHED_COMMIT_REV_RANGE}" > "${CICD_COMMIT_MESSAGES_FILE}"
        poetry run pre-commit run --hook-stage commit-msg spelling-commit-message --commit-msg-filename "${CICD_COMMIT_MESSAGES_FILE}"
      COMMAND_NAME: "Commit Message Spelling"
      CONCURRENCY: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_CONCURRENCY }}
      PYTHON_VERSIONS: ${{ toJSON(fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_PYTHON_VERSIONS) }}
      REV_RANGE: "3ae7e77ac2803a6171ce3a86fce95d40ae874933..HEAD"
      VERBOSE_NOTIFICATIONS: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_VERBOSE_NOTIFICATIONS }}

  json_schema_lint:
    needs: [configuration]
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    uses: cicd-tools-org/cicd-tools/.github/workflows/job-80-poetry-precommit_commit_stage_hook.yml@main
    with:
      CONCURRENCY: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_CONCURRENCY }}
      PRECOMMIT_HOOK_ID: "check-jsonschema"
      PRECOMMIT_HOOK_NAME: "Cookiecutter JSON Schema Linter"
      PYTHON_VERSIONS: ${{ toJSON(fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_PYTHON_VERSIONS) }}
      VERBOSE_NOTIFICATIONS: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_VERBOSE_NOTIFICATIONS }}

  markdown_lint:
    needs: [configuration]
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    uses: cicd-tools-org/cicd-tools/.github/workflows/job-80-cookiecutter-precommit_commit_stage_hook.yml@main
    with:
      CONCURRENCY: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_CONCURRENCY }}
      PRECOMMIT_HOOK_ID: "lint-markdown"
      PRECOMMIT_HOOK_NAME: "Markdown Linting"
      PYTHON_VERSIONS: ${{ toJSON(fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_PYTHON_VERSIONS) }}
      VERBOSE_NOTIFICATIONS: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_VERBOSE_NOTIFICATIONS }}

  markdown_spelling:
    needs: [configuration]
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    uses: cicd-tools-org/cicd-tools/.github/workflows/job-80-cookiecutter-precommit_commit_stage_hook.yml@main
    with:
      CONCURRENCY: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_CONCURRENCY }}
      PRECOMMIT_HOOK_ID: "spelling-markdown"
      PRECOMMIT_HOOK_NAME: "Markdown Spelling"
      PYTHON_VERSIONS: ${{ toJSON(fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_PYTHON_VERSIONS) }}
      VERBOSE_NOTIFICATIONS: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_VERBOSE_NOTIFICATIONS }}

  shell_lint:
    needs: [configuration]
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    strategy:
      fail-fast: true
      matrix:
        hook:
          - id: "format-shell"
            name: "Shell Formatting"
          - id: "lint-shell"
            name: "Shell Linting"
      max-parallel: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_CONCURRENCY }}
    uses: cicd-tools-org/cicd-tools/.github/workflows/job-80-cookiecutter-precommit_commit_stage_hook.yml@main
    with:
      CONCURRENCY: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_CONCURRENCY }}
      PRECOMMIT_HOOK_ID: ${{ matrix.hook.id }}
      PRECOMMIT_HOOK_NAME: ${{ matrix.hook.name }}
      PYTHON_VERSIONS: ${{ toJSON(fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_PYTHON_VERSIONS) }}
      VERBOSE_NOTIFICATIONS: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_VERBOSE_NOTIFICATIONS }}

  toml_lint:
    needs: [configuration]
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    uses: cicd-tools-org/cicd-tools/.github/workflows/job-80-cookiecutter-precommit_commit_stage_hook.yml@main
    with:
      CONCURRENCY: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_CONCURRENCY }}
      PRECOMMIT_HOOK_ID: "format-toml"
      PRECOMMIT_HOOK_NAME: "TOML Formatting"
      PYTHON_VERSIONS: ${{ toJSON(fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_PYTHON_VERSIONS) }}
      VERBOSE_NOTIFICATIONS: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_VERBOSE_NOTIFICATIONS }}

  workflow_lint:
    needs: [configuration]
    secrets: inherit
    strategy:
      fail-fast: true
      matrix:
        hook:
          - id: "lint-github-workflow"
            name: "Workflow Linting"
          - id: "lint-github-workflow-header"
            name: "Workflow Header Linting"
      max-parallel: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_CONCURRENCY }}
    uses: cicd-tools-org/cicd-tools/.github/workflows/job-80-cookiecutter-precommit_commit_stage_hook.yml@main
    with:
      CONCURRENCY: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_CONCURRENCY }}
      PRECOMMIT_HOOK_ID: ${{ matrix.hook.id }}
      PRECOMMIT_HOOK_NAME: ${{ matrix.hook.name }}
      PYTHON_VERSIONS: ${{ toJSON(fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_PYTHON_VERSIONS) }}
      VERBOSE_NOTIFICATIONS: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_VERBOSE_NOTIFICATIONS }}

  yaml_lint:
    needs: [configuration]
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    uses: cicd-tools-org/cicd-tools/.github/workflows/job-80-cookiecutter-precommit_commit_stage_hook.yml@main
    with:
      CONCURRENCY: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_CONCURRENCY }}
      PRECOMMIT_HOOK_ID: "yamllint"
      PRECOMMIT_HOOK_NAME: "YAML Linting"
      PYTHON_VERSIONS: ${{ toJSON(fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_PYTHON_VERSIONS) }}
      TEMPLATE_SCENARIOS: ${{ needs.configuration.outputs.COOKIECUTTER_ALL_SCENARIOS }}
      VERBOSE_NOTIFICATIONS: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_VERBOSE_NOTIFICATIONS }}

  remote_push:
    needs: [ansible_lint, commit_lint, configuration, json_schema_lint, markdown_links, markdown_lint, markdown_spelling, pre-commit_hooks, security, shell_lint, start, toml_lint, workflow_lint, yaml_lint]
    secrets:
      REMOTE_TOKEN: ${{ secrets.REMOTE_TOKEN }}
      REMOTE_ORIGIN: ${{ secrets.REMOTE_ORIGIN }}
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    uses: cicd-tools-org/cicd-tools/.github/workflows/job-60-cookiecutter-remote_push.yml@main
    with:
      CONCURRENCY: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_CONCURRENCY }}
      PYTHON_VERSIONS: ${{ toJSON(fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_PYTHON_VERSIONS) }}
      REMOTE_TEST_TAG: "0.1.0"
      REMOTE_RELEASE_WORKFLOW: ""
      SCENARIO_TRIGGER_BASE_BRANCH_PUSH: "0.toml_linting-0.workflow_linting"
      SCENARIO_TRIGGER_DEV_BRANCH_PUSH: "1.toml_linting-1.workflow_linting"
      SCENARIO_TRIGGER_TAG_PUSH: "0.toml_linting-0.workflow_linting"
      TEMPLATE_SCENARIOS: ${{ needs.configuration.outputs.COOKIECUTTER_ALL_SCENARIOS }}
      VERBOSE_NOTIFICATIONS: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_VERBOSE_NOTIFICATIONS }}

  mac_maker_apply_test:
    needs: [configuration, remote_push]
    secrets:
      REMOTE_ORIGIN: ${{ secrets.REMOTE_ORIGIN }}
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    uses: cicd-tools-org/cicd-tools/.github/workflows/job-95-mac_maker-apply_profile.yml@main
    with:
      CACHE_FOLDERS: |
        ~/.asdf
      CONCURRENCY: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_CONCURRENCY }}
      PYTHON_VERSIONS: ${{ toJSON(fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_PYTHON_VERSIONS) }}
      TEST_ARCHITECTURES: ${{ toJSON(fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_TEMPLATE_TEST_ARCHITECTURES) }}
      TEST_BINARY_VERSIONS: ${{ toJSON(fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_TEMPLATE_TEST_BINARY_VERSIONS) }}
      TEST_OS: ${{ toJSON(fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_TEMPLATE_TEST_OSX_VERSIONS) }}
      VERBOSE_NOTIFICATIONS: ${{ fromJSON(needs.configuration.outputs.COOKIECUTTER_CONFIGURATION)._GITHUB_CI_DEFAULT_VERBOSE_NOTIFICATIONS }}

  create_release:
    permissions:
      contents: write
    needs: [configuration, mac_maker_apply_test]
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    uses: cicd-tools-org/cicd-tools/.github/workflows/job-99-poetry-create_release.yml@main
    with:
      APPENDED_CONTENT: |
        ## Release Checklist
        - [] Ensure main is synchronized with the release tag.

  success:
    needs: [create_release]
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    uses: cicd-tools-org/cicd-tools/.github/workflows/job-00-generic-notification.yml@main
    with:
      NOTIFICATION_EMOJI: ":checkered_flag:"
      NOTIFICATION_MESSAGE: "workflow has completed successfully!"
