---
name: profile-generator-self-test

# Required GitHub Repository Secrets:
# REMOTE_TOKEN      - GitHub Token With Access To This Repo
# REMOTE_ORIGIN     - The git remote repository name (organization/repo)
# SLACK_WEBHOOK     - The slack webhook for build notifications

on:
  push:
  schedule:
    - cron: "0 6 * * 1"
  workflow_dispatch:

env:
  MAC_MAKER_VERSION:  "0.0.6"
  PROJECT_NAME: "profile-generator"
  PYTHON_KEYRING_BACKEND: "keyring.backends.fail.Keyring"
  PYTHON_VERSION: "3.9"
  TEMPLATED_NAME: "profile-example"
  USERNAME: "osx-provisioner"
  VERBOSE_NOTIFICATIONS: 0

jobs:

  _start_notification:

    runs-on: ubuntu-latest

    steps:
      - name: Start -- Checkout Repository
        uses: actions/checkout@v3

      - name: Start -- Setup Environment
        run: |
          source ./{{cookiecutter.profile_slug}}/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Start -- Report Job Status on Success
        run: |
          ./{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: workflow has started!"

      - name: Start -- Report Job Status on Failure
        if: failure()
        run: |
          ./{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  _success_notification:
    needs: [create_release]

    runs-on: ubuntu-latest

    steps:
      - name: Success -- Checkout Repository
        uses: actions/checkout@v3

      - name: Success -- Setup Environment
        run: |
          source ./{{cookiecutter.profile_slug}}/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Success -- Report Job Status on Success
        run: |
          ./{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: all checks were successful!"

      - name: Success -- Report Job Status on Failure
        if: failure()
        run: |
          ./{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  ansible_lint_test:

    runs-on: ubuntu-latest

    steps:

      - name: Ansible Lint -- Checkout Repository
        uses: actions/checkout@v3
        with:
          path: 'template'

      - name: Ansible Lint -- Setup Environment
        run: |
          source ./template/{{cookiecutter.profile_slug}}/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Ansible Lint -- Install Template Requirements
        run: |
          source ./template/.github/scripts/requirements.sh

      - name: Ansible Lint -- Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Ansible Lint -- Initialize Cache Locations
        run: |
          mkdir -p ~/.cache/pypoetry/virtualenvs
          source ./template/{{cookiecutter.profile_slug}}/.github/scripts/ansible_cache.sh  \
            "$(pwd)/ansible_cache"                                                          \
            ~/.ansible

      - name: Ansible Lint -- Mount Ansible Cache
        uses: actions/cache@v3
        with:
          key: ansible-${{ hashFiles('./template/{{cookiecutter.profile_slug}}/profile/requirements.yml') }}-${{ env.CACHE_TTL }}
          path: ansible_cache

      - name: Ansible Lint -- Mount Poetry Cache
        uses: actions/cache@v3
        with:
          key: poetry-${{ hashFiles('./template/{{cookiecutter.profile_slug}}/pyproject.toml') }}-${{ runner.os }}-${{ env.CACHE_TTL }}
          path: ~/.cache/pypoetry/virtualenvs/

      - name: Ansible Lint -- Render Template
        run: |
          source ./template/.github/scripts/template.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Ansible Lint -- Lint Rendered Template
        run: |
          cd "${TEMPLATED_NAME}/profile"
          poetry run ansible-galaxy install --timeout 120 -r requirements.yml
          poetry run ansible-lint install.yml --offline

      - name: Ansible Lint -- Report Job Status on Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: ansible linting checks succeeded!"

      - name: Ansible Lint -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: ansible linting checks failed!"

  apply_profile_test:
    needs: [push_repository_test]

    runs-on: macos-${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        os: [12]
        platform: [x86_64]

    steps:
      - name: Apply Profile -- Checkout Repository
        uses: actions/checkout@v3
        with:
          path: 'template'

      - name: Apply Profile -- Setup Environment
        run: |
          source ./template/{{cookiecutter.profile_slug}}/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Apply Profile -- Initialize Cache Locations
        run: |
          source ./template/{{cookiecutter.profile_slug}}/.github/scripts/ansible_cache.sh  \
            "$(pwd)/ansible_cache"                                                          \
            "$(pwd)/installer.workspace/${TEMPLATED_NAME}-master/profile"

      - name: Apply Profile -- Mount Ansible Cache
        uses: actions/cache@v3
        with:
          key: ansible-${{ hashFiles('./template/{{cookiecutter.profile_slug}}/profile/requirements.yml') }}-${{ env.CACHE_TTL }}
          path: ansible_cache

      - name: Apply Profile -- Apply Pushed Profile
        run: |
          source ./template/.github/scripts/apply.sh
        env:
          PLATFORM_VERSION: ${{ matrix.platform }}
          OS_VERSION: ${{ matrix.os }}

      - name: Apply Profile -- Report Job Status (Success)
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: OSX ${{ matrix.os }}, profile application was successful"

      - name: OSX Build -- Report Job Status (Failure)
        if: failure()
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: OSX ${{ matrix.os }}, profile application failed!"

  create_release:
    needs: [apply_profile_test]

    runs-on: ubuntu-latest

    steps:
      - name: Create Release -- Branch Filter
        id: branch_filter
        run: |
          MATCH="FALSE"
          [[ "${{ github.event.ref }}" =~ /tags/v\.* ]] && MATCH="TRUE"
          echo "MATCH=${MATCH}" >> $GITHUB_OUTPUT

      - name: Create Release -- Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create Release -- Setup Environment
        if: steps.branch_filter.outputs.match == 'TRUE'
        run: |
          source ./{{cookiecutter.profile_slug}}/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create Release -- Generate Changelog
        if: steps.branch_filter.outputs.match == 'TRUE'
        run:
          source ./{{cookiecutter.profile_slug}}/.github/scripts/changelog.sh

      - name: Create Release -- Append Deploy Checklist
        if: steps.branch_filter.outputs.match == 'TRUE'
        run:
          source ./.github/scripts/checklist.sh

      - name: Create Release -- Generate Github Release Draft
        if: steps.branch_filter.outputs.match == 'TRUE'
        id: create_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const result = await github.rest.repos.createRelease({
                body: process.env.CHANGE_LOG_CONTENT,
                draft: true,
                name: "Release " + process.env.BRANCH_OR_TAG,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.BRANCH_OR_TAG,
              });
              return result
            } catch (error) {
              core.setFailed(error.message);
            }

      - name: Create Release -- Report Job Status on Success
        if: steps.branch_filter.outputs.match == 'TRUE'
        run: |
          ./{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: automated release has been created!\nhttps://github.com/${USERNAME}/${PROJECT_NAME}/releases"

      - name: Create Release -- Report Job Status on Failure
        if: failure()
        run: |
          ./{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: automated release creation has failed!"

  documentation_test:

    runs-on: ubuntu-latest
    env:
      PROFILE_GENERATOR_SKIP_INSTALL: 1

    steps:

      - name: Documentation Test -- Checkout Repository
        uses: actions/checkout@v3
        with:
          path: 'template'

      - name: Documentation Test -- Setup Environment
        run: |
          source ./template/{{cookiecutter.profile_slug}}/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Documentation Test -- Install Template Requirements
        run: |
          source ./template/.github/scripts/requirements.sh

      - name: Documentation Test -- Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Documentation Test -- Render Template
        run: |
          source ./template/.github/scripts/template.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Documentation Test -- Check Markdown Links For Readme
        uses: gaurav-nelson/github-action-markdown-link-check@1.0.14
        with:
          config-file: 'template/.github/config/markdown.link.check.json'
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'
          folder-path: 'template, template/.github/workflows'
          max-depth: 1

      - name: Documentation Test -- Check Markdown Links For Rendered Template
        uses: gaurav-nelson/github-action-markdown-link-check@1.0.14
        with:
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'
          folder-path: ${{ env.TEMPLATED_NAME }}
          max-depth: -1

      - name: Documentation Test -- Report Job Status on Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: documentation checks succeeded!"

      - name: Documentation Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: documentation checks failed!"

  push_repository_test:
    needs: [_start_notification, documentation_test, ansible_lint_test, security_test_repo, shellcheck_test, toml_lint_test, workflow_lint_test]

    runs-on: ubuntu-latest

    steps:

      - name: Push Test -- Checkout Repository
        uses: actions/checkout@v3
        with:
          path: 'template'
          persist-credentials: false

      - name: Push Test -- Setup Environment
        run: |
          source ./template/{{cookiecutter.profile_slug}}/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Push Test -- Install Template Requirements
        run: |
          source ./template/.github/scripts/requirements.sh

      - name: Push Test -- Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Push Test -- Initialize Cache Locations
        run: |
          mkdir -p ~/.cache/pypoetry/virtualenvs

      - name: Push Test -- Mount Poetry Cache
        uses: actions/cache@v3
        with:
          key: poetry-${{ hashFiles('./template/{{cookiecutter.profile_slug}}/pyproject.toml') }}-${{ runner.os }}-${{ env.CACHE_TTL }}
          path: ~/.cache/pypoetry/virtualenvs/

      - name: Push Test -- Render Template
        run: |
          source ./template/.github/scripts/template.sh "GitHub Action" "action@github.com"
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Push Test -- Clean Up Tags for Git Push
        run: |
          cd "${TEMPLATED_NAME}"
          git checkout master
          git tag --delete v0.0.0  # Don't Repush
          git tag v0.1.0

      - name: Push Test -- Push To Test Repository (master)
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.REMOTE_TOKEN }}
          branch: master
          tags: false
          directory: ${{ env.TEMPLATED_NAME }}
          repository: ${{ secrets.REMOTE_ORIGIN }}
          force: true

      - name: Push Test -- Push To Test Repository (production)
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.REMOTE_TOKEN }}
          branch: production
          tags: false
          directory: ${{ env.TEMPLATED_NAME }}
          repository: ${{ secrets.REMOTE_ORIGIN }}
          force: true

      - name: Push Test -- Push To Test Repository (release tag)
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.REMOTE_TOKEN }}
          branch: production
          tags: true
          directory: ${{ env.TEMPLATED_NAME }}
          repository: ${{ secrets.REMOTE_ORIGIN }}
          force: true

      - name: Push Test -- Report Job Status on Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: push has been triggered!"

      - name: Push Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICdATION}" ":x: push failed to trigger!"

  security_test_repo:

    runs-on: ubuntu-latest

    steps:
      - name: Security Test Repo -- Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Security Test Repo -- Setup Environment
        run: |
          source ./{{cookiecutter.profile_slug}}/.github/scripts/setup.sh
          source ./{{cookiecutter.profile_slug}}/.github/scripts/pushed_commit_range.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - name: Security Test Repo -- Run Trufflehog
        uses: trufflesecurity/trufflehog@v3.20.0
        with:
          path: .
          base: ${{ env.PUSHED_COMMIT_RANGE }}
          head: ${{ env.BRANCH_OR_TAG }}

      - name: Security Test Repo -- Report Job Status on Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: repo security checks succeeded!"

      - name: Security Test Repo -- Report Job Status on Failure
        if: failure()
        run: |
          ./{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: repo security checks failed!"

  shellcheck_test:

    runs-on: ubuntu-latest
    env:
      PROFILE_GENERATOR_SKIP_INSTALL: 1

    steps:
      - name: Shellcheck -- Checkout Repository
        uses: actions/checkout@v3
        with:
          path: 'template'

      - name: Shellcheck -- Setup Environment
        run: |
          source ./template/{{cookiecutter.profile_slug}}/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Shellcheck -- Install Template Requirements
        run: |
          source ./template/.github/scripts/requirements.sh

      - name: Shellcheck -- Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Shellcheck -- Render Template
        run: |
          source ./template/.github/scripts/template.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Shellcheck -- Shellcheck Scripts
        run: |
          shellcheck ./template/hooks/*.sh
          shellcheck ./template/scripts/*.sh
          shellcheck ./template/.github/scripts/*.sh

      - name: Shellcheck -- Shellcheck Rendered Scripts
        run: |
          shellcheck "${TEMPLATED_NAME}"/.github/scripts/*.sh

      - name: Shellcheck -- Report Job Status on Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: shellcheck checks succeeded!"

      - name: Shellcheck -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: shellcheck checks failed!"

  toml_lint_test:

    runs-on: ubuntu-latest
    env:
      PROFILE_GENERATOR_SKIP_INSTALL: 1

    steps:
      - name: Toml Lint -- Checkout Repository
        uses: actions/checkout@v3
        with:
          path: 'template'

      - name: Toml Lint -- Setup Environment
        run: |
          source ./template/{{cookiecutter.profile_slug}}/.github/scripts/setup.sh
          sudo apt-get install -y golang-github-pelletier-go-toml
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Toml Lint -- Install Template Requirements
        run: |
          source ./template/.github/scripts/requirements.sh

      - name: Toml Lint -- Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Toml Lint -- Render Template
        run: |
          source ./template/.github/scripts/template.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Toml Lint -- Run Linter
        run: |
          cd "${TEMPLATED_NAME}"
          tomll pyproject.toml
          git diff --exit-code

      - name: Toml Lint -- Report Job Status (Success)
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: toml linting was successful!"

      - name: Toml Lint -- Report Job Status (Failure)
        if: failure()
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: toml linting has failed!"

  workflow_lint_test:

    runs-on: ubuntu-latest
    env:
      PROFILE_GENERATOR_SKIP_INSTALL: 1

    steps:
      - name: Workflow Lint -- Checkout Repository
        uses: actions/checkout@v3
        with:
          path: 'template'

      - name: Workflow Lint -- Setup Environment
        run: |
          source ./template/{{cookiecutter.profile_slug}}/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Workflow Lint -- Install Template Requirements
        run: |
          source ./template/.github/scripts/requirements.sh

      - name: Workflow Lint -- Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Workflow Lint -- Render Template
        run: |
          source ./template/.github/scripts/template.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Workflow Lint -- Lint Template Workflows
        uses: ibiqlik/action-yamllint@v3
        with:
          format: standard
          file_or_dir: ./template/.github/workflows
          config_file: ./${{ env.TEMPLATED_NAME }}/profile/.yamllint.yml

      - name: Workflow Lint -- Lint Rendered Workflows
        uses: ibiqlik/action-yamllint@v3
        with:
          format: standard
          file_or_dir: ./${{ env.TEMPLATED_NAME }}/.github/workflows/
          config_file: ./${{ env.TEMPLATED_NAME }}/profile/.yamllint.yml

      - name: Workflow Lint -- Report Job Status on Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: workflow linting checks succeeded!"

      - name: Workflow Lint -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: workflow linting checks failed!"
