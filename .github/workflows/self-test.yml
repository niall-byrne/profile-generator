---
name: profile-generator-self-test

# Required GitHub Repository Secrets:
# REMOTE_TOKEN      - GitHub Token With Access To This Repo
# REMOTE_ORIGIN     - The git remote repository name (organization/repo)
# SLACK_WEBHOOK     - The slack webhook for build notifications

on:
  push:
  schedule:
    - cron: "0 6 * * 1"
  workflow_dispatch:

env:
  RELEASE_VERSION:  "v0.0.2"
  PROJECT_NAME: "profile-generator"
  TEMPLATED_NAME: "profile-example"
  USERNAME: "osx-provisioner"
  VERBOSE_NOTIFICATIONS: 0

jobs:

  apply_profile_test:
    needs: [push_repository_test]

    runs-on: macos-${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        os: [10.15]
        platform: [x86_64]
        python-version: [3.8.10]

    steps:
      - name: OSX Build -- Checkout Repository
        uses: actions/checkout@v2
        with:
          path: 'template'

      - name: OSX Build -- Setup Environment
        run: |
          source ./template/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: OSX Build -- Apply Pushed Profile
        run: |
          source ./template/.github/scripts/apply.sh
        env:
          PLATFORM_VERSION: ${{ matrix.platform }}
          OS_VERSION: ${{ matrix.os }}

      - name: OSX Build -- Report Job Status (Success)
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: OSX ${{ matrix.os }}, profile install was successful"

      - name: OSX Build -- Report Job Status (Failure)
        if: failure()
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: OSX ${{ matrix.os }}, profile install failed!"

  create_release:
    needs: [apply_profile_test]

    runs-on: ubuntu-latest

    steps:
      - name: Create Release -- Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Create Release -- Setup Environment
        if: contains(github.ref, '/tags/v')
        run: |
          source .github/scripts/setup.sh
          echo "{}" > package.json
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create Release -- Generate Changelog
        if: contains(github.ref, '/tags/v')
        uses: scottbrenner/generate-changelog-action@v1.3.3
        id: Changelog
        env:
          REPO: ${{ github.repository }}

      - name: Create Release -- Create GitHub Release
        if: contains(github.ref, '/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.BRANCH_OR_TAG }}
          release_name: Release ${{ env.BRANCH_OR_TAG }}
          body: |
            ${{ steps.Changelog.outputs.changelog }}
            ## Deployment Checklist
            - [ ] Ensure correct version is notated
            - [ ] Ensure documentation is accurate
            - [ ] Ensure git commits are properly formatted
          draft: true
          prerelease: false

      - name: Create Release -- Report Job Status on Success
        if: contains(github.ref, '/tags/v')
        run: |
          ./{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: automated release has been created!\nhttps://github.com/${USERNAME}/${PROJECT_NAME}/releases"

      - name: Create Release -- Report Job Status on Failure
        if: failure()
        run: |
          ./{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: automated release creation has failed!"

  documentation_test:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]

    steps:

      - name: Documentation Test -- Checkout Repository
        uses: actions/checkout@v2
        with:
          path: 'template'

      - name: Documentation Test -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Documentation Test -- Setup Environment / Render Template
        run: |
          source ./template/.github/scripts/setup.sh
          source ./template/.github/scripts/template.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Documentation Test -- Check Markdown Links For Readme
        uses: gaurav-nelson/github-action-markdown-link-check@1.0.12
        with:
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'
          folder-path: 'template, template/.github/workflows'
          max-depth: 1

      - name: Documentation Test -- Check Markdown Links For Rendered Template
        uses: gaurav-nelson/github-action-markdown-link-check@1.0.12
        with:
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'
          folder-path: ${{ env.TEMPLATED_NAME }}
          max-depth: -1

      - name: Documentation Test -- Report Job Status on Success
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: documentation checks succeeded!"

      - name: Documentation Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: documentation checks failed!"

  ansible_lint_test:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]

    steps:

      - name: Ansible Lint -- Checkout Repository
        uses: actions/checkout@v2
        with:
          path: 'template'

      - name: Ansible Lint -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Ansible Lint -- Setup Environment / Render Template
        run: |
          source ./template/.github/scripts/setup.sh
          source ./template/.github/scripts/template.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Ansible Lint -- Lint Rendered Template
        run: |
          cd ${TEMPLATED_NAME}/profile
          poetry run ansible-galaxy install -r requirements.yml
          poetry run ansible-lint install.yml --exclude ${HOME}/.ansible/roles/

      - name: Ansible Lint -- Report Job Status on Success
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: ansible linting checks succeeded!"

      - name: Ansible Lint -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: ansible linting checks failed!"

  push_repository_test:
    needs: [documentation_test, ansible_lint_test, security_test_repo, security_test_template, shellcheck_test, workflow_lint_test]

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]

    steps:

      - name: Push Test -- Checkout Repository
        uses: actions/checkout@v2
        with:
          path: 'template'
          persist-credentials: false

      - name: Push Test -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Push Test -- Setup Environment / Render Template
        run: |
          source ./template/.github/scripts/setup.sh
          source ./template/.github/scripts/template.sh "GitHub Action" "action@github.com"
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Push Test -- Clean Up Tags for Git Push
        run: |
          cd ${TEMPLATED_NAME}
          git checkout master
          git tag --delete v0.0.0  # Don't Repush
          git tag v0.1.0

      - name: Push Test -- Push To Test Repository (master)
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.REMOTE_TOKEN }}
          branch: master
          tags: false
          directory: ${{ env.TEMPLATED_NAME }}
          repository: ${{ secrets.REMOTE_ORIGIN }}
          force: true

      - name: Push Test -- Push To Test Repository (production)
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.REMOTE_TOKEN }}
          branch: production
          tags: false
          directory: ${{ env.TEMPLATED_NAME }}
          repository: ${{ secrets.REMOTE_ORIGIN }}
          force: true

      - name: Push Test -- Push To Test Repository (release tag)
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.REMOTE_TOKEN }}
          branch: production
          tags: true
          directory: ${{ env.TEMPLATED_NAME }}
          repository: ${{ secrets.REMOTE_ORIGIN }}
          force: true

      - name: Push Test -- Report Job Status on Success
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: push has been triggered!"

      - name: Push Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: push failed to trigger!"

  security_test_repo:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]

    steps:
      - name: Security Test -- Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Security Test -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Security Test -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Security Test -- Run Gitleaks
        uses: zricethezav/gitleaks-action@v1.6.0

      - name: Security Test -- Report Job Status on Success
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: repo security checks succeeded!"

      - name: Security Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: repo security checks failed!"

  security_test_template:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]

    steps:
      - name: Security Test -- Checkout Repository
        uses: actions/checkout@v2
        with:
          path: 'template'
          fetch-depth: 1

      - name: Security Test -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Security Test -- Setup Environment / Render Template
        run: |
          source ./template/.github/scripts/setup.sh
          source ./template/.github/scripts/template.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Security Test -- Check Dependencies
        run: |
          pip install --upgrade pip safety
          cd "${TEMPLATED_NAME}"
            poetry install
            safety check
          cd ..

      - name: Security Test -- Report Job Status on Success
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: template security checks succeeded!"

      - name: Security Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: template security checks failed!"

  shellcheck_test:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]

    steps:
      - name: Shellcheck -- Checkout Repository
        uses: actions/checkout@v2
        with:
          path: 'template'

      - name: Shellcheck -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Shellcheck -- Setup Environment / Render Template
        run: |
          source ./template/.github/scripts/setup.sh
          source ./template/.github/scripts/template.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Shellcheck -- Shellcheck Scripts
        run: |
          shellcheck ./template/hooks/*.sh
          shellcheck ./template/.github/scripts/*.sh
      - name: Shellcheck -- Shellcheck Rendered Scripts
        run: |
          shellcheck ${TEMPLATED_NAME}/.github/scripts/*.sh

      - name: Shellcheck -- Report Job Status on Success
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: shellcheck checks succeeded!"

      - name: Shellcheck -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: shellcheck checks failed!"

  start_notification:

    runs-on: ubuntu-latest

    steps:
      - name: Start -- Checkout Repository
        uses: actions/checkout@v2

      - name: Start -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Start -- Report Job Status on Success
        run: |
          ./{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: workflow has started!"

      - name: Start -- Report Job Status on Failure
        if: failure()
        run: |
          ./{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  success_notification:
    needs: [ create_release ]

    runs-on: ubuntu-latest

    steps:
      - name: Success -- Checkout Repository
        uses: actions/checkout@v2

      - name: Success -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Success -- Report Job Status on Success
        run: |
          ./{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: all checks were successful!"

      - name: Success -- Report Job Status on Failure
        if: failure()
        run: |
          ./{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  workflow_lint_test:

    runs-on: ubuntu-latest

    steps:
      - name: Workflow Lint -- Checkout Repository
        uses: actions/checkout@v2
        with:
          path: 'template'

      - name: Workflow Lint -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Workflow Lint -- Setup Environment / Render Template
        run: |
          source ./template/.github/scripts/setup.sh
          source ./template/.github/scripts/template.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Workflow Lint -- Lint Template Workflows
        uses: ibiqlik/action-yamllint@v3
        with:
          format: standard
          file_or_dir: ./template/.github/workflows
          config_file: ./${{ env.TEMPLATED_NAME }}/profile/.yamllint.yml

      - name: Workflow Lint -- Lint Rendered Workflows
        uses: ibiqlik/action-yamllint@v3
        with:
          format: standard
          file_or_dir: ./${{ env.TEMPLATED_NAME }}/.github/workflows/
          config_file: ./${{ env.TEMPLATED_NAME }}/profile/.yamllint.yml

      - name: Workflow Lint -- Report Job Status on Success
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: workflow linting checks succeeded!"

      - name: Workflow Lint -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: workflow linting checks failed!"
