---
name: profile-generator-self-test

# Required GitHub Repository Secrets:
# REMOTE_TOKEN      - GitHub token with access to the test repository.
# REMOTE_ORIGIN     - The git remote repository name (organization/repo).
# SLACK_WEBHOOK     - The slack webhook for build notifications.

on:
  push:
  schedule:
    - cron: "0 6 * * 1"
  workflow_dispatch:

env:
  MAC_MAKER_VERSION:  "0.0.6"
  PROJECT_NAME: "profile-generator"
  PROFILE_GENERATOR_BRANCH_NAME_BASE: "master"
  PROFILE_GENERATOR_BRANCH_NAME_DEVELOPMENT: "dev"
  PYTHON_KEYRING_BACKEND: "keyring.backends.fail.Keyring"
  PYTHON_VERSION: "3.9"
  TEMPLATED_NAME: "profile-example"
  USER_NAME: "osx-provisioner"
  VERBOSE_NOTIFICATIONS: 0

jobs:

  _start_notification:

    runs-on: ubuntu-latest

    steps:
      - name: Start -- Checkout Repository
        uses: actions/checkout@v3

      - name: Start -- Setup Environment
        run: |
          source ./{{cookiecutter.profile_slug}}/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Start -- Report Job Status on Success
        run: |
          ./{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: workflow has started!"

      - name: Start -- Report Job Status on Failure
        if: failure()
        run: |
          ./{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  _success_notification:
    needs: [create_release]

    runs-on: ubuntu-latest

    steps:
      - name: Success -- Checkout Repository
        uses: actions/checkout@v3

      - name: Success -- Setup Environment
        run: |
          source ./{{cookiecutter.profile_slug}}/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Success -- Report Job Status on Success
        run: |
          ./{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: all checks were successful!"

      - name: Success -- Report Job Status on Failure
        if: failure()
        run: |
          ./{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  ansible_lint_test:

    runs-on: ubuntu-latest
    env:
      PROFILE_GENERATOR_SKIP_POETRY: 0
      PROFILE_GENERATOR_SKIP_PRECOMMIT: 0
      SELECTION_TOML: 1

    steps:

      - name: Ansible Lint -- Checkout Repository
        uses: actions/checkout@v3
        with:
          path: 'template'

      - name: Ansible Lint -- Setup Environment
        run: |
          source ./template/{{cookiecutter.profile_slug}}/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Ansible Lint -- Install Template Requirements
        run: |
          source ./template/.github/scripts/requirements.sh

      - name: Ansible Lint -- Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Ansible Lint -- Initialize Cache Locations
        run: |
          mkdir -p ~/.cache/pypoetry/virtualenvs
          source ./template/{{cookiecutter.profile_slug}}/.github/scripts/ansible_cache.sh  \
            "$(pwd)/ansible_cache"                                                          \
            ~/.ansible

      - name: Ansible Lint -- Mount Ansible Cache
        uses: actions/cache@v3
        with:
          key: ansible-${{ hashFiles('./template/{{cookiecutter.profile_slug}}/profile/requirements.yml') }}-${{ env.CACHE_TTL }}
          path: ansible_cache

      - name: Ansible Lint -- Mount Poetry Cache
        uses: actions/cache@v3
        with:
          key: poetry-${{ hashFiles('./template/{{cookiecutter.profile_slug}}/pyproject.toml') }}-${{ runner.os }}-${{ env.CACHE_TTL }}
          path: ~/.cache/pypoetry/virtualenvs/

      - name: Ansible Lint -- Render Template
        run: |
          source ./template/.github/scripts/template.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Ansible Lint -- Lint Rendered Template
        run: |
          cd "${TEMPLATED_NAME}/profile"
          poetry run ansible-lint

      - name: Ansible Lint -- Report Job Status on Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: ansible linting checks succeeded!"

      - name: Ansible Lint -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: ansible linting checks failed!"

  apply_profile_test:
    needs: [push_repository_test]

    runs-on: macos-${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        os: [12]
        platform: [x86_64]

    steps:
      - name: Apply Profile -- Checkout Repository
        uses: actions/checkout@v3
        with:
          path: 'template'

      - name: Apply Profile -- Setup Environment
        run: |
          source ./template/{{cookiecutter.profile_slug}}/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Apply Profile -- Initialize Cache Locations
        run: |
          source ./template/{{cookiecutter.profile_slug}}/.github/scripts/ansible_cache.sh  \
            "$(pwd)/ansible_cache"                                                          \
            "$(pwd)/installer.workspace/${TEMPLATED_NAME}-${PROFILE_GENERATOR_BRANCH_NAME_BASE}/profile"

      - name: Apply Profile -- Mount Ansible Cache
        uses: actions/cache@v3
        with:
          key: ansible-${{ hashFiles('./template/{{cookiecutter.profile_slug}}/profile/requirements.yml') }}-${{ env.CACHE_TTL }}
          path: ansible_cache

      - name: Apply Profile -- Apply Pushed Profile
        run: |
          source ./template/.github/scripts/apply.sh
        env:
          OS_VERSION: ${{ matrix.os }}
          PLATFORM_VERSION: ${{ matrix.platform }}

      - name: Apply Profile -- Report Job Status (Success)
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: OSX ${{ matrix.os }}, profile application was successful"

      - name: OSX Build -- Report Job Status (Failure)
        if: failure()
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: OSX ${{ matrix.os }}, profile application failed!"

  create_release:
    needs: [apply_profile_test]

    runs-on: ubuntu-latest

    steps:
      - name: Create Release -- Checkout Repository
        uses: actions/checkout@v3

      - name: Create Release -- Filter Release Candidates
        id: filter
        run: |
          source ./{{cookiecutter.profile_slug}}/.github/scripts/release-candidate.sh "${{ github.event.ref }}"

      - name: Create Release -- Checkout Repository (All Commits)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create Release -- Setup Environment
        if: steps.filter.outputs.release_candidate == 'TRUE'
        run: |
          source ./{{cookiecutter.profile_slug}}/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create Release -- Install Poetry
        if: steps.filter.outputs.release_candidate == 'TRUE'
        run: |
          source ./{{cookiecutter.profile_slug}}/.github/scripts/poetry.sh "install-poetry"

      - name: Create Release -- Check 'pyproject.toml' Matches Tag
        if: steps.filter.outputs.release_candidate == 'TRUE'
        run: |
          source ./{{cookiecutter.profile_slug}}/.github/scripts/version.sh

      - name: Create Release -- Generate Changelog
        if: steps.filter.outputs.release_candidate == 'TRUE'
        run:
          source ./{{cookiecutter.profile_slug}}/.github/scripts/changelog.sh

      - name: Create Release -- Generate GitHub Release Draft
        if: steps.filter.outputs.release_candidate == 'TRUE'
        id: create_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const script = require('./{{cookiecutter.profile_slug}}/.github/scripts/release.js');
            const body = process.env.CHANGE_LOG_CONTENT + "\n" + process.env.CHECK_LIST_CONTENT;
            const tag = process.env.BRANCH_OR_TAG;
            await script({ body, context, core, github, tag })
        env:
          CHECK_LIST_CONTENT: |
            ## Deployment Checklist
            - [] Ensure master points to new tag

      - name: Create Release -- Report Job Status on Success
        if: steps.filter.outputs.release_candidate == 'TRUE'
        run: |
          ./{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: automated release has been created!\nhttps://github.com/${USER_NAME}/${PROJECT_NAME}/releases"

      - name: Create Release -- Report Job Status on Failure
        if: failure()
        run: |
          ./{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: automated release creation has failed!"

  documentation_test:

    runs-on: ubuntu-latest
    env:
      PROFILE_GENERATOR_SKIP_POETRY: 1
      PROFILE_GENERATOR_SKIP_PRECOMMIT: 1

    steps:

      - name: Documentation Test -- Checkout Repository
        uses: actions/checkout@v3
        with:
          path: 'template'

      - name: Documentation Test -- Setup Environment
        run: |
          source ./template/{{cookiecutter.profile_slug}}/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Documentation Test -- Install Template Requirements
        run: |
          source ./template/.github/scripts/requirements.sh

      - name: Documentation Test -- Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Documentation Test -- Render Template
        run: |
          source ./template/.github/scripts/template.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Documentation Test -- Check Markdown Links For Template
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          config-file: 'template/{{cookiecutter.profile_slug}}/.github/config/markdown.link.check.json'
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'
          folder-path: 'template, template/.github/workflows'
          max-depth: 1

      - name: Documentation Test -- Check Markdown Links For Rendered Template
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          config-file: 'template/{{cookiecutter.profile_slug}}/.github/config/markdown.link.check.json'
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'
          folder-path: ${{ env.TEMPLATED_NAME }}
          max-depth: -1

      - name: Documentation Test -- Report Job Status on Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: documentation checks succeeded!"

      - name: Documentation Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: documentation checks failed!"

  precommit_test:

    runs-on: ubuntu-latest
    env:
      PROFILE_GENERATOR_SKIP_POETRY: 0
      PROFILE_GENERATOR_SKIP_PRECOMMIT: 0
    strategy:
      matrix:
        cookiecutter-toml-selection: [1, 2]

    steps:

      - name: Pre-Commit Test -- Checkout Repository
        uses: actions/checkout@v3
        with:
          path: 'template'

      - name: Pre-Commit Test -- Setup Environment
        run: |
          source ./template/{{cookiecutter.profile_slug}}/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Pre-Commit Test -- Install Template Requirements
        run: |
          source ./template/.github/scripts/requirements.sh

      - name: Pre-Commit Test -- Install tomll
        run: |
          sudo apt-get install -y golang-github-pelletier-go-toml

      - name: Pre-Commit Test -- Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Pre-Commit -- Initialize Cache Locations
        run: |
          mkdir -p ~/.cache/pypoetry/virtualenvs
          source ./template/{{cookiecutter.profile_slug}}/.github/scripts/ansible_cache.sh  \
            "$(pwd)/ansible_cache"                                                          \
            ~/.ansible

      - name: Pre-Commit -- Mount Ansible Cache
        uses: actions/cache@v3
        with:
          key: ansible-${{ hashFiles('./template/{{cookiecutter.profile_slug}}/profile/requirements.yml') }}-${{ env.CACHE_TTL }}
          path: ansible_cache

      - name: Pre-Commit Test -- Mount Poetry Cache
        uses: actions/cache@v3
        with:
          key: poetry-${{ hashFiles('./template/{{cookiecutter.profile_slug}}/pyproject.toml') }}-${{ runner.os }}-${{ env.CACHE_TTL }}
          path: ~/.cache/pypoetry/virtualenvs/

      - name: Pre-Commit Test -- Render Template
        run: |
          source ./template/.github/scripts/template.sh "${SELECTION_TOML}" "GitHub Action" "action@github.com"
        env:
          SELECTION_TOML: ${{ matrix.cookiecutter-toml-selection }}
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Pre-Commit Test -- Test Ansible Lint -- Expect Failure
        run: |
          source ./template/.github/scripts/test_precommit.sh "ansible-lint"

      - name: Pre-Commit Test -- Test Commit Lint -- Expect Failure
        run: |
          source ./template/.github/scripts/test_precommit.sh "commit-lint"

      - name: Pre-Commit Test -- Test TOML Lint -- Expect Failure
        if: matrix.cookiecutter-toml-selection == 1
        run: |
          source ./template/.github/scripts/test_precommit.sh "toml-lint-1"

      - name: Pre-Commit Test -- Test TOML Lint -- Expect Success
        if: matrix.cookiecutter-toml-selection == 1
        run: |
          source ./template/.github/scripts/test_precommit.sh "toml-lint-2"

      - name: Pre-Commit Test -- Report Job Status on Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: pre-commit hook test has passed!"

      - name: Pre-Commit Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: pre-commit hook test has failed!"

  push_repository_test:
    needs: [_start_notification, ansible_lint_test, documentation_test, precommit_test, security_test_repo, shellcheck_test, toml_lint_test, yaml_lint_test]

    runs-on: ubuntu-latest
    env:
      PROFILE_GENERATOR_SKIP_POETRY: 1
      PROFILE_GENERATOR_SKIP_PRECOMMIT: 1
      TEMPLATED_NAME_1: "profile-example-with-toml"
      TEMPLATED_NAME_2: "profile-example-no-toml"
      TEST_PUSH_TAG: "0.1.0"

    steps:

      - name: Push Test -- Checkout Repository
        uses: actions/checkout@v3
        with:
          path: 'template'
          persist-credentials: false

      - name: Push Test -- Setup Environment
        run: |
          source ./template/{{cookiecutter.profile_slug}}/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Push Test -- Install Template Requirements
        run: |
          source ./template/.github/scripts/requirements.sh

      - name: Push Test -- Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Push Test -- Render Template
        run: |
          source ./template/.github/scripts/template.sh "1" "GitHub Action" "action@github.com"
          mv "${TEMPLATED_NAME}" "${TEMPLATED_NAME_1}"
          source ./template/.github/scripts/template.sh "2" "GitHub Action" "action@github.com"
          mv "${TEMPLATED_NAME}" "${TEMPLATED_NAME_2}"

      - name: Push Test -- Clean Up Test Releases
        run: |
          source ./template/.github/scripts/prune_test_releases.sh
        env:
          GITHUB_TOKEN: ${{ secrets.REMOTE_TOKEN }}
          REMOTE_ORIGIN: ${{ secrets.REMOTE_ORIGIN }}

      - name: Push Test -- Clean Up Tags for Git Push (${{ env.TEMPLATED_NAME_1 }})
        run: |
          cd "${TEMPLATED_NAME_1}"
          git checkout "${PROFILE_GENERATOR_BRANCH_NAME_BASE}"
          git tag --delete 0.0.0  # Don't Repush

      - name: Push Test -- Test Commit (${{ env.TEMPLATED_NAME_1 }})
        run: |
          cd "${TEMPLATED_NAME_1}"
          echo "test commit" > test_file.txt
          git add test_file.txt
          git commit -m 'feat(TEST_FILE): add test file'
          git tag "${TEST_PUSH_TAG}"

      - name: Push Test -- Push To Test Repository (${{ env.PROFILE_GENERATOR_BRANCH_NAME_BASE }}) (${{ env.TEMPLATED_NAME_1 }})
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.REMOTE_TOKEN }}
          branch: ${{ env.PROFILE_GENERATOR_BRANCH_NAME_BASE }}
          tags: false
          directory: ${{ env.TEMPLATED_NAME_1 }}
          repository: ${{ secrets.REMOTE_ORIGIN }}
          force: true

      - name: Push Test -- Push To Test Repository (${{ env.PROFILE_GENERATOR_BRANCH_NAME_DEVELOPMENT }}) (${{ env.TEMPLATED_NAME_2 }})
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.REMOTE_TOKEN }}
          branch: ${{ env.PROFILE_GENERATOR_BRANCH_NAME_DEVELOPMENT }}
          tags: false
          directory: ${{ env.TEMPLATED_NAME_2 }}
          repository: ${{ secrets.REMOTE_ORIGIN }}
          force: true

      - name: Push Test -- Push To Test Repository (release tag)
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.REMOTE_TOKEN }}
          branch: ${{ env.PROFILE_GENERATOR_BRANCH_NAME_BASE }}
          tags: true
          directory: ${{ env.TEMPLATED_NAME_1 }}
          repository: ${{ secrets.REMOTE_ORIGIN }}
          force: true

      - name: Push Test -- Report Job Status on Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: push has been triggered!"

      - name: Push Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: push failed to trigger!"

  security_test_repo:

    runs-on: ubuntu-latest

    steps:
      - name: Security Test Repo -- Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Security Test Repo -- Setup Environment
        run: |
          source ./{{cookiecutter.profile_slug}}/.github/scripts/setup.sh
          source ./{{cookiecutter.profile_slug}}/.github/scripts/pushed_commit_range.sh
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Security Test Repo -- Run Trufflehog
        uses: trufflesecurity/trufflehog@v3.20.0
        with:
          path: .
          base: ${{ env.PUSHED_COMMIT_START }}
          head: ${{ env.BRANCH_OR_TAG }}

      - name: Security Test Repo -- Report Job Status on Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: repo security checks succeeded!"

      - name: Security Test Repo -- Report Job Status on Failure
        if: failure()
        run: |
          ./{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: repo security checks failed!"

  shellcheck_test:

    runs-on: ubuntu-latest
    env:
      PROFILE_GENERATOR_SKIP_POETRY: 1
      PROFILE_GENERATOR_SKIP_PRECOMMIT: 1

    steps:
      - name: Shellcheck -- Checkout Repository
        uses: actions/checkout@v3
        with:
          path: 'template'

      - name: Shellcheck -- Setup Environment
        run: |
          source ./template/{{cookiecutter.profile_slug}}/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Shellcheck -- Install Template Requirements
        run: |
          source ./template/.github/scripts/requirements.sh

      - name: Shellcheck -- Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Shellcheck -- Render Template
        run: |
          source ./template/.github/scripts/template.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Shellcheck -- Shellcheck Scripts
        run: |
          shellcheck ./template/hooks/*.sh
          shellcheck ./template/scripts/*.sh
          shellcheck ./template/.github/scripts/*.sh

      - name: Shellcheck -- Shellcheck Rendered Scripts
        run: |
          cd "${TEMPLATED_NAME}"
          shellcheck ./.github/scripts/*.sh
          shellcheck -x ./.pre-commit/*.sh

      - name: Shellcheck -- Report Job Status on Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: shellcheck checks succeeded!"

      - name: Shellcheck -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: shellcheck checks failed!"

  toml_lint_test:

    runs-on: ubuntu-latest
    env:
      PROFILE_GENERATOR_SKIP_POETRY: 1
      PROFILE_GENERATOR_SKIP_PRECOMMIT: 1

    steps:
      - name: Toml Lint -- Checkout Repository
        uses: actions/checkout@v3
        with:
          path: 'template'

      - name: Toml Lint -- Setup Environment
        run: |
          source ./template/{{cookiecutter.profile_slug}}/.github/scripts/setup.sh
          sudo apt-get install -y golang-github-pelletier-go-toml
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Toml Lint -- Install Template Requirements
        run: |
          source ./template/.github/scripts/requirements.sh

      - name: Toml Lint -- Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Toml Lint -- Render Template
        run: |
          source ./template/.github/scripts/template.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Toml Lint -- Run Linter
        run: |
          cd "${TEMPLATED_NAME}"
          find . -type f -name "*.toml" -exec tomll "{}" \;
          git diff --exit-code

      - name: Toml Lint -- Report Job Status (Success)
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: toml linting was successful!"

      - name: Toml Lint -- Report Job Status (Failure)
        if: failure()
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: toml linting has failed!"

  yaml_lint_test:

    runs-on: ubuntu-latest
    env:
      PROFILE_GENERATOR_SKIP_POETRY: 1
      PROFILE_GENERATOR_SKIP_PRECOMMIT: 1
    strategy:
      matrix:
        cookiecutter-toml-selection: [1, 2]

    steps:
      - name: Yaml Lint Test -- Checkout Repository
        uses: actions/checkout@v3
        with:
          path: 'template'

      - name: Yaml Lint Test -- Setup Environment
        run: |
          source ./template/{{cookiecutter.profile_slug}}/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Yaml Lint Test-- Install Template Requirements
        run: |
          source ./template/.github/scripts/requirements.sh

      - name: Yaml Lint Test -- Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Yaml Lint Test -- Render Template
        run: |
          source ./template/.github/scripts/template.sh "${SELECTION_TOML}"
        env:
          SELECTION_TOML: ${{ matrix.cookiecutter-toml-selection }}
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Yaml Lint Test -- Lint Template GitHub Workflows
        uses: ibiqlik/action-yamllint@v3
        with:
          format: standard
          file_or_dir: ./template/.github/workflows
          config_file: ./${{ env.TEMPLATED_NAME }}/profile/.yamllint.yml

      - name: Yaml Lint Test -- Lint Rendered GitHub Workflows
        uses: ibiqlik/action-yamllint@v3
        with:
          format: standard
          file_or_dir: ./${{ env.TEMPLATED_NAME }}/.github/workflows/
          config_file: ./${{ env.TEMPLATED_NAME }}/profile/.yamllint.yml

      - name: Yaml Lint Test -- Lint Rendered Top Level Configuration Files
        uses: ibiqlik/action-yamllint@v3
        with:
          format: standard
          file_or_dir: ./${{ env.TEMPLATED_NAME }}/.pre-commit-config.yaml ./${{ env.TEMPLATED_NAME }}/mac_maker.yml
          config_file: ./${{ env.TEMPLATED_NAME }}/profile/.yamllint.yml

      - name: Yaml Lint Test -- Report Job Status on Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: YAML linting checks succeeded!"

      - name: Yaml Lint Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.profile_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: YAML linting checks failed!"
