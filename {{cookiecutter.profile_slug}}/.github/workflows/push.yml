---
name: {{ cookiecutter.profile_slug}}-push

# Workflow Secrets:
# SLACK_WEBHOOK              (Required, for slack notifications...)

on:
  push:
  schedule:
    - cron: '0 6 * * 1'
  workflow_dispatch:

env:
  PROJECT_NAME: "{{ cookiecutter.profile_slug }}"
  PYTHON_VERSION: "{{ cookiecutter._MAC_MAKER_PYTHON_VERSION }}"
  USER_NAME: "{{ cookiecutter.github_handle }}"
  VERBOSE_NOTIFICATIONS: 0

{% raw %}
jobs:

  _start_notification:

    runs-on: ubuntu-latest

    steps:
      - name: Start -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Start -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Start -- Report Job Status on Success
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: workflow has started!"

      - name: Start -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  _success_notification:
    needs: [create_release]

    runs-on: ubuntu-latest

    steps:
      - name: Success -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Success -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Success -- Report Job Status on Success
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: all checks were successful!"

      - name: Success -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  ansible_lint:

    runs-on: ubuntu-latest

    steps:

      - name: Ansible Lint -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Ansible Lint -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Ansible Lint -- Set up Python ${{ env.PYTHON_VERSION }}
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_PYTHON }}{% raw %}
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Ansible Lint -- Install Poetry
        run: |
          source .github/scripts/poetry.sh "install-poetry"

      - name: Ansible Lint -- Initialize Cache Locations
        run: |
          mkdir -p ~/.cache/pypoetry/virtualenvs
          source .github/scripts/ansible_cache.sh  \
            "$(pwd)/ansible_cache"                 \
            ~/.ansible

      - name: Ansible Lint -- Mount Ansible Cache
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CACHE }}{% raw %}
        with:
          key: ansible-${{ hashFiles('./profile/requirements.yml') }}-${{ env.CACHE_TTL }}
          path: ansible_cache

      - name: Ansible Lint -- Mount Poetry Cache
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CACHE }}{% raw %}
        with:
          key: poetry-${{ hashFiles('pyproject.toml') }}-${{ runner.os }}-${{ env.CACHE_TTL }}
          path: ~/.cache/pypoetry/virtualenvs

      - name: Ansible Lint -- Install Requirements
        run: |
          source .github/scripts/poetry.sh "install-project"

      - name: Ansible Lint -- Install Ansible Galaxy Dependencies
        run: |
          cd profile
          poetry run ansible-galaxy install --timeout 120 -r requirements.yml

      - name: Ansible Lint -- Run Linter
        run: |
          cd profile
          poetry run ansible-lint

      - name: Ansible Lint -- Report Job Status (Success)
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: ansible lint checks were successful!"

      - name: Ansible Lint -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: ansible lint checks failed!"

  create_release:
    needs: {% endraw %}[_start_notification, ansible_lint, documentation_test, security_test,{% if cookiecutter.optional_toml_linting == 'true' %} toml_lint_test,{% endif %} yaml_lint_test]{% raw %}

    runs-on: ubuntu-latest

    steps:
      - name: Create Release -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Create Release -- Filter Release Candidates
        id: filter
        run: |
          source .github/scripts/release-candidate.sh "${{ github.event.ref }}"

      - name: Create Release -- Checkout Repository (All Commits)
        if: steps.filter.outputs.release_candidate == 'TRUE'
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}
        with:
          fetch-depth: 0

      - name: Create Release -- Setup Environment
        if: steps.filter.outputs.release_candidate == 'TRUE'
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create Release -- Install poetry
        if: steps.filter.outputs.release_candidate == 'TRUE'
        run: |
          source ./.github/scripts/poetry.sh "install-poetry"

      - name: Create Release -- Check 'pyproject.toml' Matches Tag
        if: steps.filter.outputs.release_candidate == 'TRUE'
        run: |
          source ./.github/scripts/version.sh

      - name: Create Release -- Generate Changelog
        if: steps.filter.outputs.release_candidate == 'TRUE'
        run:
          source ./.github/scripts/changelog.sh

      - name: Create Release -- Generate GitHub Release Draft
        if: steps.filter.outputs.release_candidate == 'TRUE'
        id: create_release
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_SCRIPT }}{% raw %}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const script = require('./.github/scripts/release.js')
            const body = process.env.CHANGE_LOG_CONTENT;
            const tag = process.env.BRANCH_OR_TAG;
            return await script({ body, context, core, github, tag })

      - name: Create Release -- Report Job Status (Success)
        if: steps.filter.outputs.release_candidate == 'TRUE'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: automated release has been created:\nhttps://github.com/${USER_NAME}/${PROJECT_NAME}/releases"

      - name: Create Release -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: automated release generation failed!"

  documentation_test:

    runs-on: ubuntu-latest

    steps:
      - name: Documentation Test -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Documentation Test -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Documentation Test -- Documentation Validation
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_MARKDOWN_LINK_CHECK }}{% raw %}
        with:
          config-file: '.github/config/markdown.link.check.json'
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'

      - name: Documentation Test -- Report Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: documentation test was successful!"

      - name: Documentation Test -- Report Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: documentation test has failed!"

  security_test:

    runs-on: ubuntu-latest

    steps:
      - name: Security Test -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}
        with:
          fetch-depth: 0

      - name: Security Test -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
          source ./.github/scripts/pushed_commit_range.sh
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Security Test -- Run Trufflehog
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_TRUFFLEHOG }}{% raw %}
        with:
          path: .
          base: ${{ env.PUSHED_COMMIT_START }}
          head: ${{ env.BRANCH_OR_TAG }}

      - name: Security Test -- Report Job Status on Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: security checks were successful!"

      - name: Security Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: security checks failed!"

  {%- endraw %}{% if cookiecutter.optional_toml_linting == 'true' %}

  toml_lint_test:

    runs-on: ubuntu-latest

    steps:
      - name: Toml Lint -- Checkout Repository
        uses: {{ cookiecutter._GITHUB_ACTION_CHECKOUT }}

      - name: Toml Lint -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
          sudo apt-get install -y golang-github-pelletier-go-toml
        env:
          WEBHOOK_URL: {{ '${{' }} secrets.SLACK_WEBHOOK {{ '}}' }}

      - name: Toml Lint -- Run Linter
        run: |
          find . -type f -name "*.toml" -exec tomll "{}" \;
          git diff --exit-code

      - name: Toml Lint -- Report Job Status (Success)
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: toml linting was successful!"

      - name: Toml Lint -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: toml linting has failed!"

  {%- endif %}{% raw %}

  yaml_lint_test:

    runs-on: ubuntu-latest

    steps:
      - name: Yaml Lint Test -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Yaml Lint Test -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Yaml Lint Test -- Run Linter on GitHub Workflows
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_YAMLLINT }}{% raw %}
        with:
          format: standard
          file_or_dir: ./.github/workflows
          config_file: ./profile/.yamllint.yml

      - name: Yaml Lint Test -- Run Linter on Top Level Configurations
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_YAMLLINT }}{% raw %}
        with:
          format: standard
          file_or_dir: .pre-commit-config.yaml mac_maker.yml
          config_file: ./profile/.yamllint.yml

      - name: Yaml Lint Test -- Report Job Status (Success)
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: YAML linting was successful!"

      - name: Yaml Lint Test -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: YAML linting has failed!"
{% endraw %}