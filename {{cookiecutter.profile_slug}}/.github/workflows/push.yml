---
name: {{ cookiecutter.profile_slug}}-push

# Workflow Secrets:
# SLACK_WEBHOOK              (Required, for slack notifications...)

on:
  push:
  schedule:
    - cron: '0 6 * * 1'
  workflow_dispatch:

env:
  PROJECT_NAME: "{{ cookiecutter.profile_slug }}"
  USERNAME: "{{ cookiecutter.github_handle }}"
  VERBOSE_NOTIFICATIONS: 0

{% raw %}
jobs:

  _start_notification:

    runs-on: ubuntu-latest

    steps:
      - name: Start -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Start -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Start -- Report Job Status on Success
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: workflow has started!"

      - name: Start -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  _success_notification:
    needs: [create_release]

    runs-on: ubuntu-latest

    steps:
      - name: Success -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Success -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Success -- Report Job Status on Success
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: all checks were successful!"

      - name: Success -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  ansible_lint:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [{% endraw %}{{ cookiecutter._GITHUB_CI_PYTHON_VERSION }}{% raw %}]

    steps:

      - name: Ansible Lint -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Ansible Lint -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Ansible Lint -- Install Poetry
        run: |
          source .github/scripts/poetry.sh

      - name: Ansible Lint -- Set up Python ${{ matrix.python-version }}
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_PYTHON }}{% raw %}
        with:
          python-version: ${{ matrix.python-version }}

      - name: Ansible Lint -- Initialize Cache Locations
        run: |
          mkdir -p ~/.cache/pypoetry/virtualenvs
          source .github/scripts/ansible_cache.sh  \
            "$(pwd)/ansible_cache"                 \
            ~/.ansible

      - name: Ansible Lint -- Mount Ansible Cache
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CACHE }}{% raw %}
        with:
          key: ansible-${{ hashFiles('./profile/requirements.yml') }}-${{ env.CACHE_TTL }}
          path: ansible_cache

      - name: Ansible Lint -- Mount Poetry Cache
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CACHE }}{% raw %}
        with:
          key: poetry-${{ hashFiles('pyproject.toml') }}-${{ runner.os }}-${{ env.CACHE_TTL }}
          path: ~/.cache/pypoetry/virtualenvs

      - name: Ansible Lint -- Install Requirements
        run: |
          poetry install

      - name: Ansible Lint -- Run Linter
        run: |
          cd profile
          poetry run ansible-galaxy install --timeout 120 -r requirements.yml
          poetry run ansible-lint install.yml --offline

      - name: Ansible Lint -- Report Job Status (Success)
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: ansible lint checks were successful!"

      - name: Ansible Lint -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: ansible lint checks failed!"

  create_release:
    needs: [_start_notification, ansible_lint, documentation_test, security_test, toml_lint_test, workflow_lint_test]

    runs-on: ubuntu-latest

    steps:
      - name: Create Release -- Branch Filter
        id: branch_filter
        run: |
          MATCH="FALSE"
          [[ "${{ github.event.ref }}" =~ /tags/v\.* ]] && MATCH="TRUE"
          echo "MATCH=${MATCH}" >> $GITHUB_OUTPUT

      - name: Create Release -- Checkout Repository
        if: steps.branch_filter.outputs.match == 'TRUE'
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}
        with:
          fetch-depth: 0

      - name: Create Release -- Setup Environment
        if: steps.branch_filter.outputs.match == 'TRUE'
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create Release -- Install poetry
        if: steps.branch_filter.outputs.match == 'TRUE'
        run: |
          source ./.github/scripts/poetry.sh

      - name: Create Release -- Check 'pyproject.toml' Matches Tag
        if: steps.branch_filter.outputs.match == 'TRUE'
        run: |
          source ./.github/scripts/version.sh

      - name: Create Release -- Generate Changelog
        if: steps.branch_filter.outputs.match == 'TRUE'
        run:
          source ./.github/scripts/changelog.sh

      - name: Create Release -- Generate Github Release Draft
        if: steps.branch_filter.outputs.match == 'TRUE'
        id: create_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const result = await github.rest.repos.createRelease({
                body: process.env.CHANGE_LOG_CONTENT,
                draft: true,
                name: "Release " + process.env.BRANCH_OR_TAG,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.BRANCH_OR_TAG,
              });
              return result
            } catch (error) {
              core.setFailed(error.message);
            }

      - name: Create Release -- Report Job Status (Success)
        if: steps.branch_filter.outputs.match == 'TRUE'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: automated release has been created:\nhttps://github.com/${USERNAME}/${PROJECT_NAME}/releases"

      - name: Create Release -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: automated release generation failed!"

  documentation_test:

    runs-on: ubuntu-latest

    steps:
      - name: Documentation Test -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Documentation Test -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Documentation Test -- Documentation Validation
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_MARKDOWN_LINK_CHECK }}{% raw %}
        with:
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'

      - name: Documentation Test -- Report Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: documentation test was successful!"

      - name: Documentation Test -- Report Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: documentation test has failed!"

  security_test:

    runs-on: ubuntu-latest

    steps:
      - name: Security Test -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}
        with:
          fetch-depth: 0

      - name: Security Test -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
          source ./.github/scripts/pushed_commit_range.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - name: Security Test -- Run Trufflehog
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_TRUFFLEHOG }}{% raw %}
        with:
          path: .
          base: ${{ env.PUSHED_COMMIT_RANGE }}
          head: ${{ env.BRANCH_OR_TAG }}

      - name: Security Test -- Report Job Status on Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: security checks were successful!"

      - name: Security Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: security checks failed!"

  toml_lint_test:

    runs-on: ubuntu-latest

    steps:
      - name: Toml Lint -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Toml Lint -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
          sudo apt-get install -y golang-github-pelletier-go-toml
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Toml Lint -- Run Linter
        run: |
          tomll pyproject.toml
          git diff --exit-code

      - name: Toml Lint -- Report Job Status (Success)
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: toml linting was successful!"

      - name: Toml Lint -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: toml linting has failed!"

  workflow_lint_test:

    runs-on: ubuntu-latest

    steps:
      - name: Workflow Lint -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Workflow Lint -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Workflow Lint -- Run Linter
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_YAMLLINT }}{% raw %}
        with:
          format: standard
          file_or_dir: ./.github/workflows
          config_file: ./profile/.yamllint.yml

      - name: Workflow Lint -- Report Job Status (Success)
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: workflow linting was successful!"

      - name: Workflow Lint -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: workflow linting has failed!"
{% endraw %}