---
name: {{ cookiecutter.profile_slug}}-push

# Workflow Secrets:
# SLACK_WEBHOOK              (Required, for slack notifications...)

on:
  push:
  workflow_dispatch:

{% raw %}
jobs:


  ansible_lint:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]

    steps:

      - name: Ansible Lint -- Checkout Repository
        uses: actions/checkout@v1
      - name: Ansible Lint -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Ansible Lint -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      - name: Ansible Lint -- Install Requirements
        run: |
          pip install poetry
          poetry install

      - name: Ansible Lint -- Run Linter
        run: |
          cd profile
          poetry run ansible-galaxy install -r requirements.yml
          poetry run ansible-lint install.yml --exclude ${HOME}/.ansible/roles/

      - name: Ansible Lint -- Report Job Status (Success)
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: ansible lint checks were successful!"
      - name: Ansible Lint -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: ansible lint checks failed!"

  documentation_test:

    runs-on: ubuntu-latest

    steps:

      - name: Documentation Test -- Checkout Repository
        uses: actions/checkout@v1

      - name: Documentation Test -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Documentation Test -- Documentation Validation
        uses: gaurav-nelson/github-action-markdown-link-check@1.0.11
        with:
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'

      - name: Documentation Test -- Report Success
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: documentation test was successful!"
      - name: Documentation Test -- Report Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: documentation test has failed!"

  release:
    needs: [ansible_lint, documentation_test, security_test]

    runs-on: ubuntu-latest

    steps:

      - name: Release -- Checkout Repository
        if: contains(github.ref, '/tags/v')
        uses: actions/checkout@v1

      - name: Release -- Setup Environment
        if: contains(github.ref, '/tags/v')
        run: |
          source ./.github/scripts/setup.sh
          NEWTAG=${BRANCH_OR_TAG}
          echo "NEWTAG=${NEWTAG}" >> $GITHUB_ENV
          echo "{}" > package.json
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Release -- Generate Changelog
        if: contains(github.ref, '/tags/v')
        uses: scottbrenner/generate-changelog-action@1.0.3
        id: Changelog
        env:
          REPO: ${{ github.repository }}
      - name: Release -- Create GitHub Release
        if: contains(github.ref, '/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEWTAG }}
          release_name: Release ${{ env.NEWTAG }}
          body: |
            ${{ steps.Changelog.outputs.changelog }}
          draft: true
          prerelease: false

      - name: Release -- Report Job Status (Success)
        if: contains(github.ref, '/tags/v')
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: automated release has been created:\nhttps://github.com/${USERNAME}/${PROJECT_NAME}/releases"
      - name: Release -- Report Job Status (Failure)
        if: failure() && contains(github.ref, '/tags/v')
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: automated release generation failed!"

  security_test:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]

    steps:

      - name: Security Test -- Checkout Repository
        uses: actions/checkout@v1
      - name: Security Test -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Security Test -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Security Test -- Run Gitleaks
        uses: zricethezav/gitleaks-action@master

      - name: Security Test -- Check Dependencies
        run: |
          pip install safety poetry
          pip install --upgrade pip
          poetry install
          safety check

      - name: Security Test -- Report Job Status on Success
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: security checks were successful!"
      - name: Security Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: security checks failed!"

  workflow_lint:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]

    steps:

      - name: Workflow Lint -- Checkout Repository
        uses: actions/checkout@v1
      - name: Workflow Lint -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Workflow Lint -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      - name: Workflow Lint -- Install Requirements
        run: |
          pip install yamllint

      - name: Workflow Lint -- Run Linter
        run: |
          yamllint .github/workflows -c ./profile/.yamllint -f standard

      - name: Workflow Lint -- Report Job Status (Success)
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: workflow linting was successful!"
      - name: Workflow Lint -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: workflow linting has failed!"
{% endraw %}