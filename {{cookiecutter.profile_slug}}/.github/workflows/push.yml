---
name: {{ cookiecutter.profile_slug}}-push

# Workflow Secrets:
# SLACK_WEBHOOK              (Required, for slack notifications...)

on:
  push:
  schedule:
    - cron: '0 6 * * 1'
  workflow_dispatch:

env:
  PYTHON_VERSION: "{{ cookiecutter._MAC_MAKER_PYTHON_VERSION }}"
  MAC_MAKER_PYTHON_VERSION: "{{ cookiecutter._MAC_MAKER_PYTHON_VERSION }}"

{% raw %}
jobs:

  configuration:

    runs-on: ubuntu-latest
    outputs:
      configuration: ${{ steps.configuration.outputs.value }}
      python-version: ${{ steps.python-version.outputs.value }}

    steps:
      - name: Create Configuration -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Create Configuration -- Validate the 'push.json' File
        run: |
          python -m json.tool .github/config/workflows/push.json >> /dev/null

      - name: Create Configuration -- Set the 'push.json' Configuration File as Output
        id: configuration
        run: |
          source .github/scripts/workflow-set-value.sh cat .github/config/workflows/push.json

      - name: Create Configuration -- Set the Mac Maker Python Version as Output
        id: python-version
        run: |
          source .github/scripts/workflow-set-value.sh echo "${MAC_MAKER_PYTHON_VERSION}"

  _start_notification:

    runs-on: ubuntu-latest

    steps:
      - name: Start -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Start -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Start -- Report Job Status on Success
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: workflow has started!"

      - name: Start -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  _success_notification:
    needs: [create_release]

    runs-on: ubuntu-latest

    steps:
      - name: Success -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Success -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Success -- Report Job Status on Success
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: all checks were successful!"

      - name: Success -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  ansible_lint:
    needs: [configuration]

    runs-on: ubuntu-latest

    steps:

      - name: Ansible Lint -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Ansible Lint -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Ansible Lint -- Set up Python ${{ env.PYTHON_VERSION }}
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_PYTHON }}{% raw %}
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Ansible Lint -- Install Poetry
        run: |
          source .github/scripts/poetry.sh "install-poetry"

      - name: Ansible Lint -- Initialize Cache Locations
        run: |
          mkdir -p ~/.cache/pypoetry/virtualenvs
          source .github/scripts/ansible_cache.sh  \
            "$(pwd)/ansible_cache"                 \
            ~/.ansible

      - name: Ansible Lint -- Mount Ansible Cache
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CACHE }}{% raw %}
        with:
          key: ansible-${{ hashFiles('./profile/requirements.yml') }}-${{ env.CACHE_TTL }}
          path: ansible_cache

      - name: Ansible Lint -- Mount Poetry Cache
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CACHE }}{% raw %}
        with:
          key: poetry-${{ hashFiles('pyproject.toml') }}-${{ runner.os }}-${{ env.CACHE_TTL }}
          path: ~/.cache/pypoetry/virtualenvs

      - name: Ansible Lint -- Install Requirements
        run: |
          source .github/scripts/poetry.sh "install-project"

      - name: Ansible Lint -- Install Ansible Galaxy Dependencies
        run: |
          cd profile
          poetry run ansible-galaxy install --timeout 120 -r requirements.yml

      - name: Ansible Lint -- Run Linter
        run: |
          cd profile
          poetry run ansible-lint

      - name: Ansible Lint -- Report Job Status (Success)
        if: fromJSON(needs.configuration.outputs.configuration).ci_verbose_notifications == true
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: ansible lint checks were successful!"

      - name: Ansible Lint -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: ansible lint checks failed!"

  create_release:
    needs: {% endraw %}[configuration, _start_notification, ansible_lint, commit_lint_test, documentation_test, security_test,{% if cookiecutter.optional_toml_linting == 'true' %} toml_lint_test,{% endif %} yaml_lint_test]{% raw %}

    runs-on: ubuntu-latest

    steps:
      - name: Create Release -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Create Release -- Filter Release Candidates
        id: filter
        run: |
          source .github/scripts/release-candidate.sh "${{ github.event.ref }}"

      - name: Create Release -- Checkout Repository (All Commits)
        if: steps.filter.outputs.release_candidate == 'TRUE'
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}
        with:
          fetch-depth: 0

      - name: Create Release -- Setup Environment
        if: steps.filter.outputs.release_candidate == 'TRUE'
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create Release -- Install poetry
        if: steps.filter.outputs.release_candidate == 'TRUE'
        run: |
          source ./.github/scripts/poetry.sh "install-poetry"

      - name: Create Release -- Check 'pyproject.toml' Matches Tag
        if: steps.filter.outputs.release_candidate == 'TRUE'
        run: |
          source ./.github/scripts/version.sh

      - name: Create Release -- Generate Changelog
        if: steps.filter.outputs.release_candidate == 'TRUE'
        run:
          source ./.github/scripts/changelog.sh

      - name: Create Release -- Generate GitHub Release Draft
        if: steps.filter.outputs.release_candidate == 'TRUE'
        id: create_release
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_SCRIPT }}{% raw %}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const script = require('./.github/scripts/release.js')
            const extraContent = "\n" + JSON.parse(process.env.EXTRA_RELEASE_CONTENT).join("\n")
            const body = process.env.CHANGE_LOG_CONTENT + extraContent
            const tag = process.env.BRANCH_OR_TAG;
            return await script({ body, context, core, github, tag })
        env:
          EXTRA_RELEASE_CONTENT: ${{ toJSON(fromJSON(needs.configuration.outputs.configuration).ci_extra_release_content) }}

      - name: Create Release -- Report Job Status (Success)
        if: steps.filter.outputs.release_candidate == 'TRUE'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: automated release has been created:\nhttps://github.com/${USER_NAME}/${PROJECT_NAME}/releases"

      - name: Create Release -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: automated release generation failed!"

  {%- endraw %}

  security_test:
    needs: [configuration]
    uses: ./.github/workflows/.job-10-security.yml
    with:
      TRUFFLEHOG_ARGS: {% raw %}${{ fromJSON(needs.configuration.outputs.configuration).ci_trufflehog_extra_scan_args }}{% endraw %}
      VERBOSITY: {% raw %}${{ fromJSON(needs.configuration.outputs.configuration).ci_verbose_notifications }}{% endraw %}
    secrets: inherit

  documentation_test:
    needs: [configuration]
    uses: ./.github/workflows/.job-30-documentation.yml
    with:
      VERBOSITY: {% raw %}${{ fromJSON(needs.configuration.outputs.configuration).ci_verbose_notifications }}{% endraw %}
    secrets: inherit

  commit_lint_test:
    needs: [configuration]
    uses: ./.github/workflows/.job-80-commit-lint.yml
    with:
      COMMITIZEN_REV_RANGE: {% raw %}${{ fromJSON(needs.configuration.outputs.configuration).ci_commitzen_rev_range }}{% endraw %}
      PYTHON_VERSION: {% raw %}${{ needs.configuration.outputs.python-version }}{% endraw %}
      VERBOSITY: {% raw %}${{ fromJSON(needs.configuration.outputs.configuration).ci_verbose_notifications }}{% endraw %}
    secrets: inherit

  {%- if cookiecutter.optional_toml_linting == 'true' %}

  toml_lint_test:
    needs: [configuration]
    uses: ./.github/workflows/.job-80-toml-lint.yml
    with:
      VERBOSITY: {% raw %}${{ fromJSON(needs.configuration.outputs.configuration).ci_verbose_notifications }}{% endraw %}
    secrets: inherit

  {%- endif %}

  yaml_lint_test:
    needs: [configuration]
    uses: ./.github/workflows/.job-80-yaml-lint.yml
    with:
      VERBOSITY: {% raw %}${{ fromJSON(needs.configuration.outputs.configuration).ci_verbose_notifications }}{% endraw %}
    secrets: inherit
